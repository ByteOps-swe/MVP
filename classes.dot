digraph "classes" {
rankdir=BT
charset="utf-8"
"PythonSensorsSimulator.Model.AdapterMisurazione.AdapterMisurazione" [color="black", fontcolor="black", label=<{AdapterMisurazione|__misurazione<br ALIGN="LEFT"/>|__format_value(value)<br ALIGN="LEFT"/>__init__(misurazione: Misurazione)<br ALIGN="LEFT"/>to_json()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"PythonSensorsSimulator.Model.Simulators.ChargingStationSimulator.ChargingStationSimulator" [color="black", fontcolor="black", label=<{ChargingStationSimulator|__count : int<br ALIGN="LEFT"/>__transition_probability : float<br ALIGN="LEFT"/>_misurazione<br ALIGN="LEFT"/>|__init__(latitude: float, longitude: float, cella: str, initial_value)<br ALIGN="LEFT"/>_generate_measure()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"PythonSensorsSimulator.Model.ComponentSimulatorThread.ComponentSimulatorThread" [color="black", fontcolor="black", label=<{ComponentSimulatorThread|<br ALIGN="LEFT"/>|<I>run</I>(): None<br ALIGN="LEFT"/><I>stop</I>(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"PythonSensorsSimulator.Model.Writers.CompositeWriter.CompositeWriter" [color="black", fontcolor="black", label=<{CompositeWriter|_writers : list<br ALIGN="LEFT"/>|__init__()<br ALIGN="LEFT"/>add_kafkaConfluent_writer(topic: str, host, port)<br ALIGN="LEFT"/>add_list_writer()<br ALIGN="LEFT"/>add_stdOut_writer()<br ALIGN="LEFT"/>add_writer(writer)<br ALIGN="LEFT"/>remove_writer(writer)<br ALIGN="LEFT"/>write(to_write)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"PythonSensorsSimulator.Model.Simulators.Coordinate.Coordinate" [color="black", fontcolor="black", label=<{Coordinate|__latitude : float<br ALIGN="LEFT"/>__longitude : float<br ALIGN="LEFT"/>|__init__(latitude: float, longitude: float)<br ALIGN="LEFT"/>get_latitude()<br ALIGN="LEFT"/>get_longitude()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"PythonSensorsSimulator.Model.Simulators.DustPM10Simulator.DustPM10Simulator" [color="black", fontcolor="black", label=<{DustPM10Simulator|__count : int<br ALIGN="LEFT"/>_misurazione<br ALIGN="LEFT"/>|__init__(latitude: float, longitude: float, cella: str, initial_dust_level)<br ALIGN="LEFT"/>_generate_measure(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"PythonSensorsSimulator.Model.Simulators.EcologicalIslandSimulator.EcologicalIslandSimulator" [color="black", fontcolor="black", label=<{EcologicalIslandSimulator|__count : int<br ALIGN="LEFT"/>__fill_rate : int<br ALIGN="LEFT"/>__max_fill_percentage : int<br ALIGN="LEFT"/>__min_fill_percentage : int<br ALIGN="LEFT"/>_misurazione<br ALIGN="LEFT"/>|__init__(latitude: float, longitude: float, cella: str, initial_fill_percentage)<br ALIGN="LEFT"/>_generate_measure()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"PythonSensorsSimulator.Model.Simulators.ElectricalFaultSimulator.ElectricalFaultSimulator" [color="black", fontcolor="black", label=<{ElectricalFaultSimulator|__count : int<br ALIGN="LEFT"/>_fault_probability : float<br ALIGN="LEFT"/>_misurazione : int<br ALIGN="LEFT"/>|__init__(latitude: float, longitude: float, cella: str, initial_value)<br ALIGN="LEFT"/>_generate_measure(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"PythonSensorsSimulator.Model.Simulators.HumiditySimulator.HumiditySimulator" [color="black", fontcolor="black", label=<{HumiditySimulator|__count : int<br ALIGN="LEFT"/>_misurazione<br ALIGN="LEFT"/>|__init__(latitude: float, longitude: float, cella: str, initial_humidity)<br ALIGN="LEFT"/>_generate_measure()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"PythonSensorsSimulator.Model.Writers.kafkaAdapter.KafkaConfluentAdapter.KafkaConfluentAdapter" [color="black", fontcolor="black", label=<{KafkaConfluentAdapter|__producer : NoneType<br ALIGN="LEFT"/>__topic : str<br ALIGN="LEFT"/>|__configure_producer(ip: str, port: str): None<br ALIGN="LEFT"/>__init__(topic: str, ip: str, port: str)<br ALIGN="LEFT"/>write_to_kafka(data: str): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"PythonSensorsSimulator.Model.Writers.kafkaAdapter.KafkaTarget.KafkaTarget" [color="black", fontcolor="black", label=<{KafkaTarget|<br ALIGN="LEFT"/>|<I>write_to_kafka</I>(topic: str, data: str): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"PythonSensorsSimulator.Model.Writers.KafkaWriter.KafkaWriter" [color="black", fontcolor="black", label=<{KafkaWriter|__kafka_target : Optional[KafkaTarget]<br ALIGN="LEFT"/>__lock<br ALIGN="LEFT"/>|__init__(kafka_target: KafkaTarget)<br ALIGN="LEFT"/>write(to_write: Writable): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"PythonSensorsSimulator.Model.Writers.ListWriter.ListWriter" [color="black", fontcolor="black", label=<{ListWriter|__data_list : list<br ALIGN="LEFT"/>__lock : lock<br ALIGN="LEFT"/>|__init__()<br ALIGN="LEFT"/>get_data_list(): list<br ALIGN="LEFT"/>write(to_write: Writable): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"PythonSensorsSimulator.Model.Simulators.Misurazione.Misurazione" [color="black", fontcolor="black", label=<{Misurazione|__ID_sensore<br ALIGN="LEFT"/>__cella<br ALIGN="LEFT"/>__coordinates<br ALIGN="LEFT"/>__timestamp<br ALIGN="LEFT"/>__type<br ALIGN="LEFT"/>__value<br ALIGN="LEFT"/>|__init__(timestamp, value, type_, coordinate: Coordinate, ID_sensore, cella)<br ALIGN="LEFT"/>get_ID_sensore()<br ALIGN="LEFT"/>get_cella()<br ALIGN="LEFT"/>get_latitude()<br ALIGN="LEFT"/>get_longitude()<br ALIGN="LEFT"/>get_timestamp()<br ALIGN="LEFT"/>get_type()<br ALIGN="LEFT"/>get_value()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"PythonSensorsSimulator.Model.Simulators.SensorFactory.SensorFactory" [color="black", fontcolor="black", label=<{SensorFactory|<br ALIGN="LEFT"/>|create_charging_station_sensor(latitude: float, longitude: float, cella: str, probabilita_occupazione)<br ALIGN="LEFT"/>create_dust_PM10_sensor(latitude: float, longitude: float, cella: str, initial_value)<br ALIGN="LEFT"/>create_ecological_island_sensor(latitude: float, longitude: float, cella: str, initial_value)<br ALIGN="LEFT"/>create_eletrical_fault_sensor(latitude: float, longitude: float, cella: str, fault_probability)<br ALIGN="LEFT"/>create_humidity_sensor(latitude: float, longitude: float, cella: str, initial_value)<br ALIGN="LEFT"/>create_temperature_sensor(latitude: float, longitude: float, cella: str, initial_value)<br ALIGN="LEFT"/>create_water_presence_sensor(latitude: float, longitude: float, cella: str, soglia_rilevamento)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"PythonSensorsSimulator.Model.Simulators.Simulator.Simulator" [color="black", fontcolor="black", label=<{Simulator|__ID_sensor : str<br ALIGN="LEFT"/>__cella_sensore : str<br ALIGN="LEFT"/>__coordinate<br ALIGN="LEFT"/>__type : str<br ALIGN="LEFT"/>_misurazione : int<br ALIGN="LEFT"/>|__init__(latitude: float, longitude: float, cella: str, sensor_id: str, misurazione_iniziale, type)<br ALIGN="LEFT"/>_filter(): bool<br ALIGN="LEFT"/><I>_generate_measure</I>(): None<br ALIGN="LEFT"/>simulate(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"PythonSensorsSimulator.Model.SimulatorExecutorFactory.SimulatorExecutorFactory" [color="black", fontcolor="black", label=<{SimulatorExecutorFactory|__simulator_executor<br ALIGN="LEFT"/>|__init__()<br ALIGN="LEFT"/>add_simulator(simulator: Simulator, writers: Writer, frequency: float, data_to_generate: int): 'SimulatorExecutorFactory'<br ALIGN="LEFT"/>add_simulator_thread(thread_simulator: ComponentSimulatorThread): 'SimulatorExecutorFactory'<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"PythonSensorsSimulator.Model.SimulatorThread.SimulatorThread" [color="black", fontcolor="black", label=<{SimulatorThread|__data_to_generate : Optional[int]<br ALIGN="LEFT"/>__frequency : float<br ALIGN="LEFT"/>__is_running : bool<br ALIGN="LEFT"/>__simulator<br ALIGN="LEFT"/>__writers<br ALIGN="LEFT"/>|__init__(simulator: Simulator, writers: Writer, frequency: float, data_to_generate: Optional[int])<br ALIGN="LEFT"/>run(): None<br ALIGN="LEFT"/>stop(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"PythonSensorsSimulator.Model.SimulatorThreadPool.SimulatorThreadPool" [color="black", fontcolor="black", label=<{SimulatorThreadPool|__simulators : list<br ALIGN="LEFT"/>__thread_pool_adapter<br ALIGN="LEFT"/>|__init__(thread_pool_adapter: ThreadPoolTarget)<br ALIGN="LEFT"/>__start_simulator(simulator: ComponentSimulatorThread)<br ALIGN="LEFT"/>__stop_simulator(simulator: ComponentSimulatorThread)<br ALIGN="LEFT"/>append_simulator(simulator: ComponentSimulatorThread)<br ALIGN="LEFT"/>run_all()<br ALIGN="LEFT"/>stop_all()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"PythonSensorsSimulator.Model.Writers.StdoutWriter.StdoutWriter" [color="black", fontcolor="black", label=<{StdoutWriter|__counter_lock : lock<br ALIGN="LEFT"/>__lock : lock<br ALIGN="LEFT"/>__message_counter : int<br ALIGN="LEFT"/>|__init__()<br ALIGN="LEFT"/>__update_counter()<br ALIGN="LEFT"/>write(to_write: Writable): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"PythonSensorsSimulator.Model.Simulators.TemperatureSimulator.TemperatureSimulator" [color="black", fontcolor="black", label=<{TemperatureSimulator|__count : int<br ALIGN="LEFT"/>_misurazione<br ALIGN="LEFT"/>|__init__(latitude: float, longitude: float, cella: str, initial_temperature)<br ALIGN="LEFT"/>_generate_measure(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"PythonSensorsSimulator.Model.ThreadPoolAdapter.ThreadPoolExecutorAdapter.ThreadPoolExecutorAdapter" [color="black", fontcolor="black", label=<{ThreadPoolExecutorAdapter|__executor : ThreadPoolExecutor<br ALIGN="LEFT"/>|__init__()<br ALIGN="LEFT"/>map(func, iterable)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"PythonSensorsSimulator.Model.ThreadPoolAdapter.ThreadPoolTarget.ThreadPoolTarget" [color="black", fontcolor="black", label=<{ThreadPoolTarget|<br ALIGN="LEFT"/>|<I>map</I>(func, iterable)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"PythonSensorsSimulator.Model.Simulators.WaterPresenceSensor.WaterPresenceSensor" [color="black", fontcolor="black", label=<{WaterPresenceSensor|__count : int<br ALIGN="LEFT"/>__threshold : float<br ALIGN="LEFT"/>_misurazione<br ALIGN="LEFT"/>|__init__(latitude: float, longitude: float, cella: str, threshold)<br ALIGN="LEFT"/>_generate_measure()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"PythonSensorsSimulator.Model.Writers.Writable.Writable" [color="black", fontcolor="black", label=<{Writable|<br ALIGN="LEFT"/>|<I>to_json</I>(): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"PythonSensorsSimulator.Model.Writers.Writer.Writer" [color="black", fontcolor="black", label=<{Writer|<br ALIGN="LEFT"/>|<I>write</I>(to_write: Writable): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"PythonSensorsSimulator.Model.AdapterMisurazione.AdapterMisurazione" -> "PythonSensorsSimulator.Model.Writers.Writable.Writable" [arrowhead="empty", arrowtail="none"];
"PythonSensorsSimulator.Model.SimulatorExecutorFactory.SimulatorExecutorFactory" -> "PythonSensorsSimulator.Model.ComponentSimulatorThread.ComponentSimulatorThread" [arrowhead="empty", arrowtail="none"];
"PythonSensorsSimulator.Model.SimulatorThread.SimulatorThread" -> "PythonSensorsSimulator.Model.ComponentSimulatorThread.ComponentSimulatorThread" [arrowhead="empty", arrowtail="none"];
"PythonSensorsSimulator.Model.Simulators.ChargingStationSimulator.ChargingStationSimulator" -> "PythonSensorsSimulator.Model.Simulators.Simulator.Simulator" [arrowhead="empty", arrowtail="none"];
"PythonSensorsSimulator.Model.Simulators.DustPM10Simulator.DustPM10Simulator" -> "PythonSensorsSimulator.Model.Simulators.Simulator.Simulator" [arrowhead="empty", arrowtail="none"];
"PythonSensorsSimulator.Model.Simulators.EcologicalIslandSimulator.EcologicalIslandSimulator" -> "PythonSensorsSimulator.Model.Simulators.Simulator.Simulator" [arrowhead="empty", arrowtail="none"];
"PythonSensorsSimulator.Model.Simulators.ElectricalFaultSimulator.ElectricalFaultSimulator" -> "PythonSensorsSimulator.Model.Simulators.Simulator.Simulator" [arrowhead="empty", arrowtail="none"];
"PythonSensorsSimulator.Model.Simulators.HumiditySimulator.HumiditySimulator" -> "PythonSensorsSimulator.Model.Simulators.Simulator.Simulator" [arrowhead="empty", arrowtail="none"];
"PythonSensorsSimulator.Model.Simulators.TemperatureSimulator.TemperatureSimulator" -> "PythonSensorsSimulator.Model.Simulators.Simulator.Simulator" [arrowhead="empty", arrowtail="none"];
"PythonSensorsSimulator.Model.Simulators.WaterPresenceSensor.WaterPresenceSensor" -> "PythonSensorsSimulator.Model.Simulators.Simulator.Simulator" [arrowhead="empty", arrowtail="none"];
"PythonSensorsSimulator.Model.ThreadPoolAdapter.ThreadPoolExecutorAdapter.ThreadPoolExecutorAdapter" -> "PythonSensorsSimulator.Model.ThreadPoolAdapter.ThreadPoolTarget.ThreadPoolTarget" [arrowhead="empty", arrowtail="none"];
"PythonSensorsSimulator.Model.Writers.CompositeWriter.CompositeWriter" -> "PythonSensorsSimulator.Model.Writers.Writer.Writer" [arrowhead="empty", arrowtail="none"];
"PythonSensorsSimulator.Model.Writers.KafkaWriter.KafkaWriter" -> "PythonSensorsSimulator.Model.Writers.Writer.Writer" [arrowhead="empty", arrowtail="none"];
"PythonSensorsSimulator.Model.Writers.ListWriter.ListWriter" -> "PythonSensorsSimulator.Model.Writers.Writer.Writer" [arrowhead="empty", arrowtail="none"];
"PythonSensorsSimulator.Model.Writers.StdoutWriter.StdoutWriter" -> "PythonSensorsSimulator.Model.Writers.Writer.Writer" [arrowhead="empty", arrowtail="none"];
"PythonSensorsSimulator.Model.Writers.kafkaAdapter.KafkaConfluentAdapter.KafkaConfluentAdapter" -> "PythonSensorsSimulator.Model.Writers.kafkaAdapter.KafkaTarget.KafkaTarget" [arrowhead="empty", arrowtail="none"];
"PythonSensorsSimulator.Model.SimulatorThreadPool.SimulatorThreadPool" -> "PythonSensorsSimulator.Model.SimulatorExecutorFactory.SimulatorExecutorFactory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__simulator_executor", style="solid"];
"PythonSensorsSimulator.Model.Simulators.Coordinate.Coordinate" -> "PythonSensorsSimulator.Model.Simulators.Simulator.Simulator" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__coordinate", style="solid"];
"PythonSensorsSimulator.Model.Simulators.Coordinate.Coordinate" -> "PythonSensorsSimulator.Model.Simulators.Misurazione.Misurazione" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="__coordinates", style="solid"];
"PythonSensorsSimulator.Model.Simulators.Misurazione.Misurazione" -> "PythonSensorsSimulator.Model.AdapterMisurazione.AdapterMisurazione" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="__misurazione", style="solid"];
"PythonSensorsSimulator.Model.Simulators.Simulator.Simulator" -> "PythonSensorsSimulator.Model.SimulatorThread.SimulatorThread" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="__simulator", style="solid"];
"PythonSensorsSimulator.Model.ThreadPoolAdapter.ThreadPoolTarget.ThreadPoolTarget" -> "PythonSensorsSimulator.Model.SimulatorThreadPool.SimulatorThreadPool" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="__thread_pool_adapter", style="solid"];
"PythonSensorsSimulator.Model.Writers.Writer.Writer" -> "PythonSensorsSimulator.Model.SimulatorThread.SimulatorThread" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="__writers", style="solid"];
"PythonSensorsSimulator.Model.Writers.kafkaAdapter.KafkaTarget.KafkaTarget" -> "PythonSensorsSimulator.Model.Writers.KafkaWriter.KafkaWriter" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="__kafka_target", style="solid"];
}
